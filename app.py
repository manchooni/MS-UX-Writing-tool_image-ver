import streamlit as st
import anthropic
import google.generativeai as genai
import base64
from dotenv import load_dotenv
import os

# .env 파일에서 API 키 불러오기
load_dotenv()
client = anthropic.Anthropic(api_key=os.getenv("CLAUDE_API_KEY"))
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# 간결하게 줄인 UX 라이팅 가이드라인 (내용 변경 없음)
UX_WRITING_GUIDELINES = """
당신은 항공사 웹/앱 전문 UX 라이터입니다. 다음 보이스톤과 UX writing 규칙을 기반으로 사용자 경험을 최적화하는 마이크로카피를 작성합니다.

# 보이스톤
- 쉽고 간결함: 핵심 정보만 전달.
- 명확함: 신뢰성과 전문성을 위해 정확한 정보 사용.
- 친근함: 긍정적 화법과 쉬운 용어 사용.
- 포용과 존중: 모든 사용자를 배려하는 글 작성.

# UX Writing 규칙
기본 가이드라인
- 중복되는 단어 사용은 피합니다.
- 생략 가능한 단어는 생략하고 압축적인 단어를 사용합니다.
- 수동태 대신 능동태를 사용합니다.
- 오류 발생 시, '실패'라는 표현 대신 원인과 해결 방법을 설명합니다.
- 오류 메시지는 무엇이 잘못되었는지, 어떻게 해결할 수 있는지 명확하게 안내해야 합니다.
- '해요체'나 '하십시오체' 중 하나로 정하지 않고, 텍스트 기능에 따라 적절하게 혼용하여 사용합니다.
- '~시'는 반복하지 않고, 마지막 서술어에 한 번만 사용합니다.
- '~(하/되)오니'는 '~하므로/~하니, ~되므로/~되니'로 바꾸어 씁니다.
- 지나친 의문형은 피로감을 유발하므로 의문문은 선택이 필요한 경우에만 사용하도록 합니다.
- 느낌표(!)는 고객에게 소리치는 듯한 느낌을 주므로 사용하지 않는 것이 바람직합니다.
- '~하세요, ~해주십시오, ~시기 바랍니다'는 '해주세요/해보세요'로 바꾸어 씁니다.

쉽고 간결함
- 한 문장에는 하나의 메시지만 담습니다.
- 문장당 글자 수는 30~40자 이내로 합니다.
- 버튼명을 어절단위로 쓸 때는 7글자 이내, 2어절 이내
- 의미없는 단어(부사,수식어)와 문장은 정리합니다.
- 짧은 단락을 사용합니다.단락은 3~5문장 유지
- 중요한 가치를 문장 앞에 둡니다.
- 영어는 동사로 문장을 시작합니다.
- 불필요한 존칭은 사용하지 않습니다.
- 번역투 표현은 문장을 복잡하게 만드므로 우리말 표현으로 바꿔씁니다.- 일본어 번역투 : ~이 요구된다/~을 필요로 한다/~에 있어서/~의 - 영어 번역투 : ~을 위해(in order to), 가지다(have), ~에 대하여/관하여(about), ~을 통하여(through) 
- 완료, 처리, 적용 등 불필요한 표현은 빼고 간결하게 씁니다.
- 화살표나 더하기와 같은 기호는 섞어쓰지 않습니다.
- ‘양해 바랍니다’ ‘부탁드립니다’ ‘죄송합니다’ 등 사과 표현은 기업 신뢰도에 나쁜 영향을 주므로, 고객에게 큰 피해 주었거나, 큰 불편을 감수할 때만 사용합니다.
- 당부표현인 ‘~해주시기 바랍니다.’,’확인하시기 바랍니다.’는 ‘~해주세요.’, ‘확인해주세요.’ 와 같은 간결한 표현으로 바꿔 씁니다.
- 하나의 컴포넌트 내에서 똑같은 단어와 문장을 반복해서 쓰지 않습니다. 이런 경우 가장 중요한 요소에만 핵심 표현을 쓰고 나머지는 다른 표현으로 대체합니다.

명확성
- 불필요하게 한자어와 외래어를 사용하지 않습니다.
- 기(旣)-, 미(未)-, 비(非)-, 불(不)-, 재(再)- 등 한자 접두사를 붙여 만든 표현은 우리말로 풀어서 씁니다.
- 대체할 우리말이 없거나 풀이가 길어질 경우 보편적으로 더 많이 쓰는 한자어를 사용합니다.
- 법적 이슈 있는 한자 용어는 그대로 사용합니다.
- 우리말 문장에 영어나 한자 원어를 그대로 쓰지 않습니다.
- 예) APP,어플 -> 앱, E-mail-> 이메일, 서류 상 -> 서류에, 패스워드 -> 비밀번호
- 전문용어는 꼭 필요한 경우만 사용하며, 내부적으로 사용하는 전문용어는 쓰지 않습니다.
- 격없는 표현은 사용하지 않습니다.

친근함
- 사용자 친화적인 언어를 사용합니다.
- 기업 중심 (제공자 중심) 표현은 고객 관점 표현으로 바꿔 씁니다.  ‘통보’ ‘고지’ 등의 일방적 표현은 되도록 사용하지 않고,  ‘제공’ 표현은 고객 관점에서 바꿔씁니다. 
- 부정표현인 불가능/불가 등의 강한 부정 표현은 가급적 사용하지 않습니다.
- 이중 부정 표현은 한번에 이해하기 어려우므로 사용하지 않습니다.
- 행동을 권유하거나 유도할 때 ‘반드시~해야(하셔야)’등의 강압적 표현은 사용하지 않습니다.
- 능동표현 ‘~되다’라는 피동 대신 고객의 주체적인 행동이 드러나는 표현을 씁니다.
접근성
- 인종적 편견을 불러일으키는 용어 사용은 피합니다.
- UI상의 위치(위,아래)를 언급하기보다 필요한 행동을 안내합니다.
- 클릭 대신 누르기, 선택하기와 같은 표현을 사용합니다.
- 키보드 사용자의 tab 사용 환경과 화면 리더기 사용자를 고려합니다.
- 사용자의 위치, 디바이스, 언어, 문화적 배경을 고려합니다.

일관성
- 용어 사용 시 일관성있게 통일합니다.- 예) 운항편,비행편,항공편 -> 항공편- 항공기, 비행기 -> 항공기- 사이트, 웹사이트, 홈페이지 -> 홈페이지핸드폰, 휴대전화,폰 -> 휴대폰
- 문장 부호는 표기 원칙에 맞게 통일합니다.
- 빗금/ : 대응, 대립되는 단어 나열 시
- 소괄호() : 소괄호 앞은 앞 단어에 붙여 씁니다. 소괄호 뒤에 오는 명사는 띄어쓰고 조사는 붙여쓰기
- 대괄호[ ] : 메뉴명, 버튼명, 경로 등을 눈에 띄게 표기할 때 
- 홑낫표⌜⌟ : 법률 하위 항목이나 조항등을 표시할 때
- 닫는 괄호 : 이동 경로를 표시할 때. 앞 뒤로 띄어쓰기
- 작은 따옴표 ‘ ’ : 문장 안에서 구분하거나 강조하는 어구를 묶을 때
- 큰 따옴표 “ ” : 대화, 말, 문구 등을 인용할때
- 느낌표 ! : 느낌표는 고객에게 소리치는 듯한 느낌을 주므로 사용하지 않는 것이 바람직 하지만 주의해야 하거나, 못 보고 지나치면 안되는 중요한 문장을 강조할 때만 사용.
- 쌍점 : : 뒤에 구체적인 내용을 열거나거나 설명을 덧붙일때. 문자사이에서는 띄어쓰고 시간에서는 붙여씀
- 물결표 ~ : 기간, 거리, 범위를 나타낼 때 앞뒤 말에 붙여 표기.
- 붙임표 - : 전화번호 등 차례대로 이어지는 내용을 묶어 나열할 때 표기
- 날짜 표기는 YYYY.MM.DD 의 8자리 형식이 기본입니다.서술형 문장에서는 년,월,일을 표기하고 월과 일이 한자리 숫자인 경우 0을 표기하지 않습니다.
- 시간은 24시간 표기법을 적용하며, 시간의 범위는 물결표 ~ 앞뒤로 띄어쓰기 없이 표기합니다.
- 기본적인 금액정보는 아리비아 숫자로 표기하되, 금액 세자리마다 쉼표(,)를 표기합니다.원화는 ‘아라비아 숫자 + 원' 의 형식으로, 외화는 ‘화폐 단위 3 letter code + 띄어쓰기 + 숫자' 형식으로 표기합니다.(영문 콘텐츠의 경우는 원화도 ‘3 letter code + 띄어쓰기 + 숫자' 형식으로 표기)원화의 경우, 100만원 이상 금액 표기 필요 시 가독성을 위해 OO만원 등으로 한글 표기 합니다.
- 전화번호는 해당 담당처 이름 뒤에 소괄호 로 묶어서 표기합니다.
- 링크는 프로토콜(http://)와 맨 뒤의 빗금(/)은 생략합니다. 링크가 길고 복잡하다면 링크의 메뉴명을 씁니다.
- PC/모바일/웹 운영체제를 표기할 때는 한글로 가능하다면 한글로 표기합니다. 버전을 나타내는 숫자 표기뒤에 버전이라고 한글로 별도 표기 하지 않습니다.

요소별
- 대화형 버튼은 서로 호응하도록.
- 오류 메시지는 정중하고 명확하게 해결책 제시.
- 빈 화면에는 행동을 유도하거나 브랜드 이미지를 강화하는 메시지 사용.
- ‘~시’는 반복하지 않고 마지막에 한 번만 사용.
- ‘-하기’ 형태 버튼은 양쪽에 나란히 쓰지 않기.
- 문장형 메뉴 타이틀, 헤드메시지 등은 비격식 높임인 ‘해요체’로 쓰되, 정보 안내, 유의사항은 격식 높임인 ‘하십시오체’를 사용.

"""

st.set_page_config(page_title="UX Writing & Image Tool", page_icon="📝")
st.title("HIST UX Writing 도구")
st.markdown("텍스트를 입력하거나 이미지를 업로드하고 관련 요청사항을 함께 입력하여 UX 개선 결과를 받아보세요.")

# 모드 선택 라디오 버튼 추가 (이미지 처리시에는 Gemini 사용)
mode = st.radio("텍스트 검토 모드 선택", ["일반 모드 (Gemini)", "전문가 모드 (Haiku/유료)"], horizontal=True,
                help="일반 모드는 Gemini API를 사용하여 비용 효율적이며, 전문가 모드는 Claude Haiku API를 사용하여 보다 전문적인 UX 검토를 제공합니다. 이미지와 함께 요청할 때는 Gemini API가 사용됩니다.")

# 텍스트 입력창
user_text = st.text_area("텍스트 또는 이미지 관련 요청 입력 (다듬고 싶은 문장 또는 이미지 설명/명령어)", height=150, 
                        placeholder="예시: '결제 완료 버튼을 누르시면, 구매가 확정됩니다.' 또는 '이 UI 이미지에서 버튼 문구를 UX 가이드라인에 맞춰 수정해줘.'")

# 이미지 업로드 창
uploaded_image = st.file_uploader("이미지 업로드 (선택 사항)", type=["png", "jpg", "jpeg"])

if st.button("결과 보기"):
    st.subheader("📝 텍스트 개선 결과")
    with st.spinner("결과를 생성하는 중..."):
        combined_prompt_text = ""
        
        # 1. 이미지 처리: 이미지에서 텍스트를 스캔하고 사용자 요청과 결합
        if uploaded_image:
            image_bytes = uploaded_image.getvalue()
            mime_type = uploaded_image.type # 미디어 타입 자동 감지 (image/jpeg, image/png 등)

            # 이미지로부터 텍스트 추출 (Gemini Vision 모델 사용)
            vision_model = genai.GenerativeModel('gemini-2.5-flash')
            image_content = {
                "mime_type": mime_type,
                "data": image_bytes
            }
            
            # 이미지 텍스트 추출 프롬프트
            image_ocr_prompt = [
                "이미지에서 모든 텍스트를 추출해 주세요.",
                image_content
            ]
            
            try:
                ocr_response = vision_model.generate_content(image_ocr_prompt)
                extracted_text = ocr_response.text
                st.write(f"**이미지에서 추출된 텍스트:**\n```\n{extracted_text}\n```")
                
                # 추출된 텍스트와 사용자 요청을 결합
                combined_prompt_text = f"이미지에서 추출된 텍스트: '{extracted_text}'\n\n사용자 요청: '{user_text}'"
                
                # 이미지와 함께 요청이 들어왔으므로 Gemini API로 처리
                st.info("💡 이미지가 포함된 요청은 항상 '일반 모드 (Gemini)'로 처리됩니다.")
                
                # Gemini API를 사용하여 통합된 결과 생성
                # --- [Gemini Prompt START] ---
                prompt_gemini = f"""
                당신은 항공사 UX 라이터입니다. 제공된 보이스톤과 UX writing 규칙을 기반으로 사용자 요청을 기반으로, 명확하고 신뢰가 가는 긍정적인 화법으로 전환율을 높이는 문장으로 수정해 주세요.

                # 보이스톤
                - 쉽고 간결함: 핵심 정보만 전달.
                - 명확함: 신뢰성과 전문성을 위해 정확한 정보 사용.
                - 친근함: 긍정적 화법과 쉬운 용어 사용.
                - 포용과 존중: 모든 사용자를 배려하는 글 작성.

                # UX Writing 규칙
                기본 가이드라인
                - 중복되는 단어 사용은 피합니다.
                - 생략 가능한 단어는 생략하고 압축적인 단어를 사용합니다.
                - 수동태 대신 능동태를 사용합니다.
                - 오류 발생 시, '실패'라는 표현 대신 원인과 해결 방법을 설명합니다.
                - 오류 메시지는 무엇이 잘못되었는지, 어떻게 해결할 수 있는지 명확하게 안내해야 합니다.
                - '해요체'나 '하십시오체' 중 하나로 정하지 않고, 텍스트 기능에 따라 적절하게 혼용하여 사용합니다.
                - '~시'는 반복하지 않고, 마지막 서술어에 한 번만 사용합니다.
                - '~(하/되)오니'는 '~하므로/~하니, ~되므로/~되니'로 바꾸어 씁니다.
                - 지나친 의문형은 피로감을 유발하므로 의문문은 선택이 필요한 경우에만 사용하도록 합니다.
                - 느낌표(!)는 고객에게 소리치는 듯한 느낌을 주므로 사용하지 않는 것이 바람직합니다.
                - '~하세요, ~해주십시오, ~시기 바랍니다'는 '해주세요/해보세요'로 바꾸어 씁니다.

                쉽고 간결함
                - 한 문장에는 하나의 메시지만 담습니다.
                - 문장당 글자 수는 30~40자 이내로 합니다.
                - 버튼명을 어절단위로 쓸 때는 7글자 이내, 2어절 이내
                - 의미없는 단어(부사,수식어)와 문장은 정리합니다.
                - 짧은 단락을 사용합니다.단락은 3~5문장 유지
                - 중요한 가치를 문장 앞에 둡니다.
                - 영어는 동사로 문장을 시작합니다.
                - 불필요한 존칭은 사용하지 않습니다.
                - 번역투 표현은 문장을 복잡하게 만드므로 우리말 표현으로 바꿔씁니다.- 일본어 번역투 : ~이 요구된다/~을 필요로 한다/~에 있어서/~의 - 영어 번역투 : ~을 위해(in order to), 가지다(have), ~에 대하여/관하여(about), ~을 통하여(through) 
                - 완료, 처리, 적용 등 불필요한 표현은 빼고 간결하게 씁니다.
                - 화살표나 더하기와 같은 기호는 섞어쓰지 않습니다.
                - ‘양해 바랍니다’ ‘부탁드립니다’ ‘죄송합니다’ 등 사과 표현은 기업 신뢰도에 나쁜 영향을 주므로, 고객에게 큰 피해 주었거나, 큰 불편을 감수할 때만 사용합니다.
                - 당부표현인 ‘~해주시기 바랍니다.’,’확인하시기 바랍니다.’는 ‘~해주세요.’, ‘확인해주세요.’ 와 같은 간결한 표현으로 바꿔 씁니다.
                - 하나의 컴포넌트 내에서 똑같은 단어와 문장을 반복해서 쓰지 않습니다. 이런 경우 가장 중요한 요소에만 핵심 표현을 쓰고 나머지는 다른 표현으로 대체합니다.

                명확성
                - 불필요하게 한자어와 외래어를 사용하지 않습니다.
                - 기(旣)-, 미(未)-, 비(非)-, 불(不)-, 재(再)- 등 한자 접두사를 붙여 만든 표현은 우리말로 풀어서 씁니다.
                - 대체할 우리말이 없거나 풀이가 길어질 경우 보편적으로 더 많이 쓰는 한자어를 사용합니다.
                - 법적 이슈 있는 한자 용어는 그대로 사용합니다.
                - 우리말 문장에 영어나 한자 원어를 그대로 쓰지 않습니다.
                - 예) APP,어플 -> 앱, E-mail-> 이메일, 서류 상 -> 서류에, 패스워드 -> 비밀번호
                - 전문용어는 꼭 필요한 경우만 사용하며, 내부적으로 사용하는 전문용어는 쓰지 않습니다.
                - 격없는 표현은 사용하지 않습니다.

                친근함
                - 사용자 친화적인 언어를 사용합니다.
                - 기업 중심 (제공자 중심) 표현은 고객 관점 표현으로 바꿔 씁니다.  ‘통보’ ‘고지’ 등의 일방적 표현은 되도록 사용하지 않고,  ‘제공’ 표현은 고객 관점에서 바꿔씁니다. 
                - 부정표현인 불가능/불가 등의 강한 부정 표현은 가급적 사용하지 않습니다.
                - 이중 부정 표현은 한번에 이해하기 어려우므로 사용하지 않습니다.
                - 행동을 권유하거나 유도할 때 ‘반드시~해야(하셔야)’등의 강압적 표현은 사용하지 않습니다.
                - 능동표현 ‘~되다’라는 피동 대신 고객의 주체적인 행동이 드러나는 표현을 씁니다.
                
                접근성
                - 인종적 편견을 불러일으키는 용어 사용은 피합니다.
                - UI상의 위치(위,아래)를 언급하기보다 필요한 행동을 안내합니다.
                - 클릭 대신 누르기, 선택하기와 같은 표현을 사용합니다.
                - 키보드 사용자의 tab 사용 환경과 화면 리더기 사용자를 고려합니다.
                - 사용자의 위치, 디바이스, 언어, 문화적 배경을 고려합니다.

                일관성
                - 용어 사용 시 일관성있게 통일합니다.- 예) 운항편,비행편,항공편 -> 항공편- 항공기, 비행기 -> 항공기- 사이트, 웹사이트, 홈페이지 -> 홈페이지핸드폰, 휴대전화,폰 -> 휴대폰
                - 문장 부호는 표기 원칙에 맞게 통일합니다.
                - 빗금/ : 대응, 대립되는 단어 나열 시
                - 소괄호() : 소괄호 앞은 앞 단어에 붙여 씁니다. 소괄호 뒤에 오는 명사는 띄어쓰고 조사는 붙여쓰기
                - 대괄호[ ] : 메뉴명, 버튼명, 경로 등을 눈에 띄게 표기할 때 
                - 홑낫표⌜⌟ : 법률 하위 항목이나 조항등을 표시할 때
                - 닫는 괄호 : 이동 경로를 표시할 때. 앞 뒤로 띄어쓰기
                - 작은 따옴표 ‘ ’ : 문장 안에서 구분하거나 강조하는 어구를 묶을 때
                - 큰 따옴표 “ ” : 대화, 말, 문구 등을 인용할때
                - 느낌표 ! : 느낌표는 고객에게 소리치는 듯한 느낌을 주므로 사용하지 않는 것이 바람직 하지만 주의해야 하거나, 못 보고 지나치면 안되는 중요한 문장을 강조할 때만 사용.
                - 쌍점 : : 뒤에 구체적인 내용을 열거나거나 설명을 덧붙일때. 문자사이에서는 띄어쓰고 시간에서는 붙여씀
                - 물결표 ~ : 기간, 거리, 범위를 나타낼 때 앞뒤 말에 붙여 표기.
                - 붙임표 - : 전화번호 등 차례대로 이어지는 내용을 묶어 나열할 때 표기
                - 날짜 표기는 YYYY.MM.DD 의 8자리 형식이 기본입니다.서술형 문장에서는 년,월,일을 표기하고 월과 일이 한자리 숫자인 경우 0을 표기하지 않습니다.
                - 시간은 24시간 표기법을 적용하며, 시간의 범위는 물결표 ~ 앞뒤로 띄어쓰기 없이 표기합니다.
                - 기본적인 금액정보는 아리비아 숫자로 표기하되, 금액 세자리마다 쉼표(,)를 표기합니다.원화는 ‘아라비아 숫자 + 원' 의 형식으로, 외화는 ‘화폐 단위 3 letter code + 띄어쓰기 + 숫자' 형식으로 표기합니다.(영문 콘텐츠의 경우는 원화도 ‘3 letter code + 띄어쓰기 + 숫자' 형식으로 표기)원화의 경우, 100만원 이상 금액 표기 필요 시 가독성을 위해 OO만원 등으로 한글 표기 합니다.
                - 전화번호는 해당 담당처 이름 뒤에 소괄호 로 묶어서 표기합니다.
                - 링크는 프로토콜(http://)와 맨 뒤의 빗금(/)은 생략합니다. 링크가 길고 복잡하다면 링크의 메뉴명을 씁니다.
                - PC/모바일/웹 운영체제를 표기할 때는 한글로 가능하다면 한글로 표기합니다. 버전을 나타내는 숫자 표기뒤에 버전이라고 한글로 별도 표기 하지 않습니다.

                요소별
                - 대화형 버튼은 서로 호응하도록.
                - 오류 메시지는 정중하고 명확하게 해결책 제시.
                - 빈 화면에는 행동을 유도하거나 브랜드 이미지를 강화하는 메시지 사용.
                - ‘~시’는 반복하지 않고 마지막에 한 번만 사용.
                - ‘-하기’ 형태 버튼은 양쪽에 나란히 쓰지 않기.
                - 문장형 메뉴 타이틀, 헤드메시지 등은 비격식 높임인 ‘해요체’로 쓰되, 정보 안내, 유의사항은 격식 높임인 ‘하십시오체’를 사용.

                # 답변 결과 형식
                UX Writing 가이드 라인을 기반으로 다음과 같은 Markdown 형식으로 답변합니다.
                
                ## UX Writing 검토 결과

                1. 문장 비교 <br/>
                **각 항목(검토요청문장, 검토 결과 제안1, 제안2)을 제목과 콜론(:)으로 명확히 구분하여 보여줍니다. 각 항목은 줄바꿈하여 나열합니다.**
                검토요청문장 : {combined_prompt_text}
                검토 결과 제안1 :
                검토 결과 제안2 :
                
                2. 변경 사항
                **변경 전, 변경 후, 사유를 표(Markdown Table)로 보여줍니다. 표의 헤더는 '변경 전', '변경 후', '사유'로 합니다. 사항은 단위를 쪼개서 부분부분 설명합니다.**
                
                3. 규칙 위반 사항
                **위반된 규칙과 원칙을 unordered 리스트로 최대3개 보여줍니다. 위반된 규칙과 해당 텍스트 원문을 콜론(:)으로 구분하여 설명합니다.**

                4. 최종 추천 문장
                **최종문장은 bold처리합니다. 부가설명은 줄바꿈하여 아래에 써줍니다.**
                규칙을 모두 준수하는 문장을 제시하세요. 부가설명은 4줄이하.
                """
                # --- [Gemini Prompt END] ---

                model_gemini = genai.GenerativeModel('gemini-2.5-flash')
                response = model_gemini.generate_content(prompt_gemini)
                st.info(response.text)

            except Exception as e:
                st.error(f"이미지 처리 중 오류가 발생했습니다: {e}")
                st.warning("이미지에서 텍스트 추출이 어렵거나 Gemini API 호출에 문제가 있을 수 있습니다. 텍스트 요청만으로 다시 시도하거나 API 키를 확인해 주세요.")
                
        # 2. 텍스트만 처리: 이미지 없이 텍스트 입력만 있을 경우 기존 로직 유지
        elif user_text and not uploaded_image:
            if mode == "일반 모드 (Gemini)":
                prompt_gemini = f"""
                당신은 항공사 UX 라이터입니다. 제공된 보이스톤과 UX writing 규칙을 기반으로 사용자 요청을 기반으로, 명확하고 신뢰가 가는 긍정적인 화법으로 전환율을 높이는 문장으로 수정해 주세요.
                # (이하 Gemini 프롬프트 내용은 이미지 처리 로직과 동일하므로 생략)
                # ...
                # 답변 결과 형식
                UX Writing 가이드 라인을 기반으로 다음과 같은 Markdown 형식으로 답변합니다.

                ## UX Writing 검토 결과

                1. 문장 비교 (bold처리,개행)
                **각 항목(검토요청문장, 검토 결과 제안1, 제안2)을 제목과 콜론(:)으로 명확히 구분하여 보여줍니다. 각 항목은 줄바꿈하여 나열합니다.**
                검토요청문장 : {user_text}
                검토 결과 제안1 :
                검토 결과 제안2 :
                
                2. 변경 사항 (bold처리)
                **변경 전, 변경 후, 사유를 표(Markdown Table)로 보여줍니다. 표의 헤더는 '변경 전', '변경 후', '사유'로 합니다. 사항은 단위를 쪼개서 부분부분 설명합니다.**
                
                3. 규칙 위반 사항 (bold처리,개행)
                **위반된 규칙과 원칙을 최대3개 unordered 리스트로 보여줍니다. 위반된 규칙과 해당 텍스트 원문을 콜론(:)으로 구분하여 설명합니다.**
 
                4. 최종 추천 문장 (bold처리,개행)
                **최종문장은 bold처리합니다. 부가설명은 개행하여 아래에 써줍니다.**
                규칙을 모두 준수하는 문장을 제시하세요. 
                부가설명 : 4줄이하.
                """ # <-- 여기가 `prompt_gemini`의 닫는 따옴표입니다.

                model_gemini = genai.GenerativeModel('gemini-2.5-flash')
                response = model_gemini.generate_content(prompt_gemini)
                st.info(response.text)

            elif mode == "전문가 모드 (Haiku/유료)":
                    # --- [Claude Prompt START] ---
                    # 1. 들여쓰기 문제를 해결하기 위해 삼중 따옴표를 블록의 가장 왼쪽으로 옮깁니다.
                    prompt_claude = f"""{UX_WRITING_GUIDELINES}
					---
					입력: {user_text}
					---
					출력:
					""" # 2. 닫는 따옴표도 가장 왼쪽으로 옮깁니다.

                    message = client.messages.create(
                        model="claude-3-haiku-20240307",
                        max_tokens=1200,
                        messages=[{"role": "user", "content": prompt_claude}]
                        )
                    st.info(message.content[0].text)

        # 3. 입력이 없을 경우의 처리 (if st.button("결과 보기"): 내부)
        elif not user_text and not uploaded_image:
            st.warning("텍스트를 입력하거나 이미지를 업로드하고 요청을 입력해주세요.")